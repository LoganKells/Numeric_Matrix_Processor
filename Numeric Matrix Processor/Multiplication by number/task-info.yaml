type: edu
custom_name: stage2
files:
- name: src/processor/Main.java
  visible: true
  text: |
    package processor;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/NumericMatrixProcessorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.SimpleTestCase;
    import org.hyperskill.hstest.testcase.TestCase;
    import processor.Main;

    import java.util.List;
    import java.util.stream.Collectors;

    public class NumericMatrixProcessorTest extends StageTest {
        public NumericMatrixProcessorTest() {
            super(Main.class);
        }


        @Override
        public List<TestCase> generate() {
            return List.of(
                new SimpleTestCase(
                    "3 3\n" +
                        "1 2 3\n" +
                        "4 5 6\n" +
                        "7 8 9\n" +
                        "3",
                    "3 6 9\n" +
                        "12 15 18\n" +
                        "21 24 27"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "2 3\n" +
                        "1 2 3\n" +
                        "4 5 6\n" +
                        "0",
                    "0 0 0\n" +
                        "0 0 0"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "5 5\n" +
                        "1 4 6 7 8\n" +
                        "1 9 5 2 2\n" +
                        "1 4 3 5 7\n" +
                        "1 4 6 4 1\n" +
                        "1 4 5 7 1\n" +
                        "5",
                    "5 20 30 35 40\n" +
                        "5 45 25 10 10\n" +
                        "5 20 15 25 35\n" +
                        "5 20 30 20 5\n" +
                        "5 20 25 35 5"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "1 1\n" +
                        "1\n" +
                        "1",
                    "1"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "1 1\n" +
                        "0\n" +
                        "1",
                    "0"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "3 2\n" +
                        "1 2\n" +
                        "8 1\n" +
                        "9 1\n" +
                        "10",
                    "10 20\n" +
                        "80 10\n" +
                        "90 10"
                ).setCheckFunc(this::checkSolved)
            );
        }

        private CheckResult checkSolved(String reply, String clue) {

            clue = clue.strip();
            reply = reply.strip();

            if (reply.equals(clue)) {
                return CheckResult.correct();
            }

            if (clue.equals("ERROR")) {
                return CheckResult.wrong("");
            }

            List<String> user = reply.lines().collect(Collectors.toList());
            List<String> answ = clue.lines().collect(Collectors.toList());

            if (user.size() != answ.size()) {
                return CheckResult.wrong("");
            }

            for (int i = 0; i < user.size(); i++) {
                String userLine = user.get(i).strip();
                String answLine = answ.get(i).strip();
                if (!userLine.equals(answLine)) {
                    return CheckResult.wrong("");
                }
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/processor/Matrix.java
  visible: true
  text: |
    package processor;

    import java.util.Arrays;

    /**This class is a n x m dimensioned matrix.
     * Operations:
     * - loadMatrix - use a data list to load a n x m matrix.
     * - printMatrix - prints all elements in the 2D matrix
     * */
    public class Matrix {
        // Variables
        private int n;
        private int m;
        int[][] matrix;

        // Constructor
        public Matrix(int n, int m) {
            this.n = n;
            this.m = m;
            matrix = new int[n][m];
        }

        // Accessors
        public int getN() {
            return this.n;
        }
        public int getM() {
            return this.m;
        }

        // Mutators
        public void loadMatrix(int[] data) {
            int dataIndex = 0;
            for (int i = 0; i < this.n; i++) {
                for (int j = 0; j < this.m; j++) {
                    matrix[i][j] = data[dataIndex];
                    dataIndex++;
                }
            }
        }
        public void printMatrix() {
            for (int i = 0; i < this.n; i++) {
                for (int j = 0; j < this.m; j++) {
                    System.out.print(matrix[i][j] + " ");
                }
                System.out.print('\n');
            }
        }
    }
  learner_created: true
- name: src/processor/MatrixHandler.java
  visible: true
  text: |
    package processor;

    import java.util.Scanner;

    /**MatrixHandler provides matrix operations.
     * Operations:
     * - checkEquivalentDimensions - Checks if two 2D matrices have equal dimensions.
     * - matrixAddition - Adds two matrices
     * */
    public class MatrixHandler {
        // Class variables
        private Scanner dataInput;
        private Matrix matrixA;
        private Matrix matrixB;

        // Constructor
        public MatrixHandler() {
            this.dataInput = new Scanner(System.in);
        }

        /** Read the first two integers as the n x m matrix dimensions, then read the subsequent n*m integers
         * and store in the matrix.*/
        public Matrix readCreateMatrix() {
            // Get dimensions
            int n = this.dataInput.nextInt();
            int m = this.dataInput.nextInt();

            // Create an empty Matrix
            Matrix myMatrix = new Matrix(n, m);

            // Read the next n*m integers
            int[] dataList = new int[n * m];
            for (int i = 0; i < dataList.length; i++) {
                dataList[i] = this.dataInput.nextInt();
            }

            // Load the integer data to the matrix
            myMatrix.loadMatrix(dataList);
            // Return the matrix populated with data.
            return myMatrix;
        }

        /**This method checks for equivalent dimensions between two 2D matrices.*/
        public Boolean checkEquivalentDimensions(Matrix matrixA, Matrix matrixB) {
            int nMatrixA = matrixA.getN();
            int mMatrixA = matrixA.getM();
            int nMatrixB = matrixB.getN();
            int mMatrixB = matrixB.getM();

            return nMatrixA == nMatrixB && mMatrixA == mMatrixB;
        }
        /**This method performs the matrix addition operation for two 2D matrices.*/
        public Matrix matrixAddition(Matrix matrixA, Matrix matrixB) {
            int n = matrixA.getN();
            int m = matrixA.getM();
            Matrix matrixC = new Matrix(n, m);
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    matrixC.matrix[i][j] = matrixA.matrix[i][j] + matrixB.matrix[i][j];
                }
            }
            return matrixC;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/60/stages/324/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 25 Dec 2020 15:17:32 UTC
record: 2

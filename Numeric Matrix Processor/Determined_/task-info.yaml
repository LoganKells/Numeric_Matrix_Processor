type: edu
custom_name: Determined!
files:
- name: src/processor/Main.java
  visible: true
  text: |
    package processor;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/NumericMatrixProcessorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import processor.Main;

    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    import static java.lang.Math.abs;


    class TestClue {

        String feedback;
        ArrayList<Double> answers;

        TestClue(String feedback, Double[] answers) {
            this.feedback = feedback;
            this.answers = new ArrayList<>(Arrays.asList(answers));
        }
    }

    public class NumericMatrixProcessorTest extends StageTest<TestClue> {

        public NumericMatrixProcessorTest() throws Exception {
            super(Main.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices adding algorithm is correct",
                        new Double[]{
                            7d, 13d, 132d,
                            17d, 23d, 45d,
                            65d, 57d, 78d
                        }))
                    .setInput(
                        "1\n"+
                            "3 3\n" +
                            "3 4 55\n" +
                            "4 1 1\n" +
                            "9 0 0\n" +
                            "3 3\n" +
                            "4 9 77\n" +
                            "13 22 44\n" +
                            "56 57 78\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices adding algorithm is correct",
                        new Double[]{
                            43.13d, 911.62d, 1311.8d, 136.53d,
                            -4.2d, 141.1d, -1.09d, 1421.6d,
                            230.33d, 114.2d, 100.7d, 990.4d,
                            956.72d, 168.94d, 112.16d, 27.0d
                        }))
                    .setInput(
                        "1\n"+
                            "4 4\n" +
                            "-0.3 677.4 435.2 123.33\n" +
                            "1.3 141.4 0.11 1411.4\n" +
                            "231.33 113.4 99.9 999.9\n" +
                            "1002.22 123.44 55.66 13.3\n" +
                            "4 4\n" +
                            "43.43 234.22 876.6 13.2\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if multiplication matrix on constant algorithm is correct",
                        new Double[]{
                            187d, 3978d, 7548d,
                            7752d, 5831d, 3774d,
                            16949d, 7752d, 7752d
                        }))
                    .setInput(
                        "2\n" +
                            "3 3\n" +
                            "11 234 444\n" +
                            "456 343 222\n" +
                            "997 456 456\n" +
                            "17\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if multiplication matrix on constant algorithm is correct",
                        new Double[]{
                            1123653d, 5933505d, 110927295d, 2365632d,
                            1505049d, 8619594d, 25665531d, 3833274d,
                            1366632d, 2598732d ,37999962d, 58303305d,
                            11068143d, 9781653d ,13666653d ,13443321d
                        }))
                    .setInput(
                        "2\n" +
                            "4 4\n" +
                            "10123 53455 999345 21312\n" +
                            "13559 77654 231221 34534\n" +
                            "12312 23412 342342 525255\n" +
                            "99713 88123 123123 121111\n" +
                            "111\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            45d, 113d, 11d, 266d,
                            84d, 139d, 29d, 229d,
                            45d, 49d, 35d, 100d,
                            15d, 86d, 0d, 281d ,
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "1 2 2 7\n" +
                            "3 3 4 5\n" +
                            "5 0 0 1\n" +
                            "0 1 0 8\n" +
                            "4 4\n" +
                            "9 8 7 13\n" +
                            "15 14 0 1\n" +
                            "3 7 2 3\n" +
                            "0 9 0 35\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            243d, 295d, 78d, 60d,
                            724d, 798d, 2063d, 175d
                        }))
                    .setInput(
                        "3\n" +
                            "2 3\n" +
                            "1 0 17\n" +
                            "15 19 7\n" +
                            "3 4\n" +
                            "5 6 78 9\n" +
                            "29 31 47 1\n" +
                            "14 17 0 3\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            100d, 105d,
                            130d, 43d,
                            48d, 53d
                        }))
                    .setInput(
                        "3\n" +
                            "3 5\n" +
                            "1 4 5 6 6\n" +
                            "7 8 9 0 0\n" +
                            "4 1 2 2 2\n" +
                            "5 2\n" +
                            "4 5\n" +
                            "6 1\n" +
                            "6 0\n" +
                            "0 9\n" +
                            "7 7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            -3728.685d, 3752.621d, 4367.396d, 1074.785d,
                            246.11d, -228.39d, -396.2d, 29.71d,
                            73.32d, -67.679d, -87.43, 25.04d,
                            -39.22d, 42.02d, 55.6d, -119.42d
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "0.65 0.67 76.4 23.2\n" +
                            "-0.7 -13.1 -7.2 9.2\n" +
                            "-0.7 -5.5 -1.5 0.4\n" +
                            "-1.0 12.6 0.8 -0.4\n" +
                            "4 4\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "-10.7 11.9 2.2 1.2\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if you can do more than one operation in a loop",
                        new Double[]{
                            -3728.685d, 3752.621d, 4367.396d, 1074.785d,
                            246.11d, -228.39d, -396.2d, 29.71d,
                            73.32d, -67.679d, -87.43, 25.04d,
                            -39.22d, 42.02d, 55.6d, -119.42d,
                            100d, 105d,
                            130d, 43d,
                            48d, 53d
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "0.65 0.67 76.4 23.2\n" +
                            "-0.7 -13.1 -7.2 9.2\n" +
                            "-0.7 -5.5 -1.5 0.4\n" +
                            "-1.0 12.6 0.8 -0.4\n" +
                            "4 4\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "-10.7 11.9 2.2 1.2\n" +
                            "3\n" +
                            "3 5\n" +
                            "1 4 5 6 6\n" +
                            "7 8 9 0 0\n" +
                            "4 1 2 2 2\n" +
                            "5 2\n" +
                            "4 5\n" +
                            "6 1\n" +
                            "6 0\n" +
                            "0 9\n" +
                            "7 7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 2d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "1\n" +
                            "3 3\n" +
                            "1 7 7\n" +
                            "6 6 4\n" +
                            "4 2 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 5d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "1\n" +
                            "3 3\n" +
                            "1 7 7\n" +
                            "6 6 4\n" +
                            "4 5 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 2d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "2\n" +
                            "3 3\n" +
                            "1 2 4\n" +
                            "4 6 6\n" +
                            "7 7 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 5d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "2\n" +
                            "3 3\n" +
                            "1 5 4\n" +
                            "4 6 6\n" +
                            "7 7 1.0\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if transposition algorithm is correct",
                        new Double[]{
                            2d, 4d, 5d, 6d,
                            6d, 6d, 7d, 8d,
                            5d, 0d, 0d, 1d,
                            8d, 8d, 2d, 9d
                        }))
                    .setInput(
                        "4\n" +
                            "3\n" +
                            "4 4\n" +
                            "6 5 4 2\n" +
                            "8 7 6 6\n" +
                            "1 0 0 5.0\n" +
                            "9 2 8 8\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if transposition algorithm is correct",
                        new Double[]{
                            2d, 4d, 5d, 6d,
                            6d, 6d, 7d, 8d,
                            5d, 0d, 0d, 1d,
                            8d, 8d, 2d, 9d
                        }))
                    .setInput(
                        "4\n" +
                            "4\n" +
                            "4 4\n" +
                            "8 8 2 9\n" +
                            "5 0 0 1\n" +
                            "6 6 7 8.0\n" +
                            "2 4 5 6\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if determinant algorithm is correct",
                        new Double[]{
                            31d
                        }))
                    .setInput(
                        "5\n" +
                            "3 3\n" +
                            "1 2 3\n" +
                            "4 5 7\n" +
                            "10 22 23\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if determinant algorithm is correct",
                        new Double[]{
                            45.2197d
                        }))
                    .setInput(
                        "5\n" +
                            "4 4\n" +
                            "2.65 3.54 3.88 8.99\n" +
                            "3.12 5.45 7.77 5.56\n" +
                            "5.31 2.23 2.33 9.81\n" +
                            "1.67 1.67 1.01 9.99\n" +
                            "0")
            );
        }


        @Override
        public CheckResult check(String reply, TestClue clue) {

            try {

                String[] strNumbers = reply.lines()
                    .filter(line -> {
                        line = line.strip();
                        if (line.length() == 0) {
                            return false;
                        }
                        for (char c : line.toCharArray()) {
                            if (!(c == ' ' ||
                                c >= '0' && c <= '9' ||
                                c == '.' ||
                                c == '-' || c == '+' ||
                                c == 'e' || c == 'E')) {
                                return false;
                            }
                        }
                        return true;
                    }).reduce("", (a, b) -> a + " " + b)
                    .strip().split("\\s+");

                double[] actual = Arrays.stream(strNumbers).mapToDouble(Double::parseDouble).toArray();

                double[] expected =
                    clue.answers.stream()
                        .mapToDouble(e -> e)
                        .toArray();
                if (actual.length != expected.length) {
                    return new CheckResult(false, clue.feedback);
                }

                for (int i = 0; i < actual.length; i++) {
                    if (abs(actual[i] - expected[i]) > 0.01) {
                        return new CheckResult(false, clue.feedback);
                    }
                }
            }
            catch (Exception ex) {
                return new CheckResult(false, "Can't check the answer");
            }

            return CheckResult.correct();

        }

    }
  learner_created: false
- name: src/processor/Matrix.java
  visible: true
  text: |
    package processor;

    import java.util.Arrays;

    /**This class is a n x m dimensioned matrix.
     * Operations:
     * - loadMatrix - use a data list to load a n x m matrix.
     * - printMatrix - prints all elements in the 2D matrix
     * */
    public class Matrix {
        // Variables
        private int n;
        private int m;
        double[][] matrix;

        // Constructor
        public Matrix(int n, int m) {
            this.n = n;
            this.m = m;
            matrix = new double[n][m];
        }

        // Accessors
        public int getN() {
            return this.n;
        }
        public int getM() {
            return this.m;
        }

        // Mutators
        public void loadMatrix(double[] data) {
            int dataIndex = 0;
            for (int i = 0; i < this.n; i++) {
                for (int j = 0; j < this.m; j++) {
                    matrix[i][j] = data[dataIndex];
                    dataIndex++;
                }
            }
        }

        void printMatrix() {
            for (int i = 0; i < this.n; i++) {
                for (int j = 0; j < this.m; j++) {
                    System.out.print(matrix[i][j] + " ");
                }
                System.out.print('\n');
            }
        }

        /**This method checks for equivalent dimensions between two 2D matrices.*/
        boolean checkEquivalentDimensions(Matrix matrixB) {
            int nMatrixB = matrixB.getN();
            int mMatrixB = matrixB.getM();

            return this.n == nMatrixB && this.m == mMatrixB;
        }

        boolean checkMultiplicationDimensions(Matrix matrixB) {
            // the n x m matrix can only multiply m x k matrix.
            int nMatrixB = matrixB.getN();
            return nMatrixB == this.m;
        }

        /**This method performs the matrix addition operation for two 2D matrices.*/
        Matrix matrixAddition(Matrix matrixB) {
            Matrix matrixC = new Matrix(this.n, this.m);
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    matrixC.matrix[i][j] = matrix[i][j] + matrixB.matrix[i][j];
                }
            }
            return matrixC;
        }

        void matrixScalar(double alpha) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    matrix[i][j] *= alpha;
                }
            }
        }

        double[] getMatrixColumn(int j) {
            // Create a column vector with the length equivalent to the row count of the matrix.
            double[] columnVector = new double[this.n];

            // Get the values
            for (int i = 0; i < this.n; i++) {
                columnVector[i] = this.matrix[i][j];
            }
            return columnVector;
        }

        Matrix matrixMultiplication(Matrix matrixB) {
            // Calculate new dimensions
            int nMatrixC = this.n;
            int mMatrixC = matrixB.getM();
            Matrix matrixC = new Matrix(nMatrixC, mMatrixC);

            // Calculate all elements of matrix C
            for (int i = 0; i < nMatrixC; i++) {
                for (int j = 0; j < mMatrixC; j++) {
                    // Calculate a single element of matrix C as dot product: rowA * colB.
                    // Use the current row from matrix A and column from matrix B for this dot product.
                    // This dot product will result in a scalar.
                    double[] columnMatrixB = matrixB.getMatrixColumn(j);
                    for (int k = 0; k < columnMatrixB.length; k++) {
                        matrixC.matrix[i][j] += matrix[i][k] * columnMatrixB[k];
                    }
                }

            }
            return matrixC;
        }

        /** This method will return the matrix's main transpose.
         * Enter matrix:
         * 1 7 7
         * 6 6 4
         * 4 2 1
         * The result is:
         * 1 6 4
         * 7 6 2
         * 7 4 1
         * */
        Matrix matrixTransposeMain() {
            // Calculate new dimensions with the transpose and create this matrix
            int n_t = this.m;
            int m_t = this.n;
            Matrix matrixA_T = new Matrix(n_t, m_t); // transposed matrix A

            // Perform transpose
            for (int i = 0; i < n_t; i++) {
                for (int j = 0; j < m_t; j++) {
                    matrixA_T.matrix[i][j] = matrix[j][i];
                }
            }
            return matrixA_T;
        }

        /** This method will return the matrix's main transpose.
         * Enter matrix:
         * 1 1 1 -1
         * 2 2 2 -2
         * 3 3 3 -3
         * The result is:
         * -3 -2 -1
         * 3 2 1
         * 3 2 1
         * 3 2 1
         * */
        Matrix matrixTransposeSide() {
            // Calculate new dimensions with the transpose and create this matrix
            int n_t = this.m;
            int m_t = this.n;
            Matrix matrixA_T = new Matrix(n_t, m_t); // transposed matrix A

            // Perform transpose
            int n_original;
            int m_original = this.m;
            for (int i = 0; i < n_t; i++) {
                n_original = this.n;
                for (int j = 0; j < m_t; j++) {
                    matrixA_T.matrix[i][j] = matrix[n_original - 1][m_original - 1];
                    n_original--;
                }
                m_original--;
            }
            return matrixA_T;
        }

        /** This method will return the matrix's vertical transpose.
         * Enter matrix:
         * 1 2 3 4
         * 5 6 7 8
         * 9 10 11 12
         * 13 14 15 16
         * The result is:
         * 4 3 2 1
         * 8 7 6 5
         * 12 11 10 9
         * 16 15 14 13
         * */
        Matrix matrixTransposeVertical()  {
            // Create a new matrix (dimensions remain the same as the original matrix)
            Matrix matrixA_T = new Matrix(this.n, this.m);

            // Perform transpose
            int m_original;
            for (int i = 0; i < this.n; i++) {
                m_original = this.m;
                for (int j = 0; j < this.m; j++) {
                    matrixA_T.matrix[i][j] = matrix[i][m_original - 1];
                    m_original--;
                }
            }
            return matrixA_T;
        }

        /** This method will return the matrix's main horizontal transpose.
         * Enter matrix:
         * 1 2 3 4
         * 5 6 7 8
         * 9 10 11 12
         * 13 14 15 16
         * The result is:
         * 13 14 15 16
         * 9 10 11 12
         * 5 6 7 8
         * 1 2 3 4
         * */
        Matrix matrixTransposeHorizontal() {
            // Create a new matrix (dimensions remain the same as the original matrix)
            Matrix matrixA_T = new Matrix(this.n, this.m);

            // Perform transpose
            int n_original = this.n;
            for (int i = 0; i < this.n; i++) {
                for (int j = 0; j < this.m; j++) {
                    matrixA_T.matrix[i][j] = matrix[n_original - 1][j];
                }
                n_original--;
            }
            return matrixA_T;
        }
    }
  learner_created: true
- name: src/processor/MatrixHandler.java
  visible: true
  text: |
    package processor;

    import java.util.Scanner;

    /**MatrixHandler provides matrix operations.
     * Operations:
     * - readCreateMatrix()
     * - runMatrixAddition()
     * */
    class MatrixHandler {
        // Class variables
        private Scanner dataInput;
        private Matrix matrixA;
        private Matrix matrixB;
        private Double scalar;

        // Constructor
        MatrixHandler() {
            this.dataInput = new Scanner(System.in);
        }

        public void setUserSelection() {
            int userSelection;
            int userSelectionTranspose;
            do {
                // Let the user select which matrix operation to run.
                System.out.println("1. Add matrices");
                System.out.println("2. Multiply matrix by a constant");
                System.out.println("3. Multiply matrices");
                System.out.println("4. Transpose matrix");
                System.out.println("0. Exit");
                System.out.print("Your choice: ");
                userSelection = this.dataInput.nextInt();

                // Run the selected matrix operation.
                switch (userSelection) {
                    case 1:
                        runMatrixAddition();
                        break;
                    case 2:
                        runMatrixScalar();
                        break;
                    case 3:
                        runMatrixMultiplication();
                        break;
                    case 4:
                        // Let the user select which type of matrix transpose operation to run.
                        System.out.println("1. Main diagonal");
                        System.out.println("2. Side diagonal");
                        System.out.println("3. Vertical line");
                        System.out.println("4. Horizontal line");
                        System.out.print("Your choice: ");
                        userSelectionTranspose = this.dataInput.nextInt();
                        // Run the proper transpose operation based on the user selection
                        switch (userSelectionTranspose) {
                            case 1:
                                runMatrixTranspose("main");
                                break;
                            case 2:
                                runMatrixTranspose("side");
                                break;
                            case 3:
                                runMatrixTranspose("vertical");
                                break;
                            case 4:
                                runMatrixTranspose("horizontal");
                            default:
                                break;
                        }
                    default:
                        break;
                }

            } while (userSelection != 0);
        }

        /** Read the first two integers as the n x m matrix dimensions, then read the subsequent n*m integers
         * and store in the matrix.*/
        private Matrix readCreateMatrix(int n, int m) {
            // Create an empty Matrix
            Matrix myMatrix = new Matrix(n, m);

            // Read the next n*m integers
            double[] dataList = new double[n * m];
            for (int i = 0; i < dataList.length; i++) {
                dataList[i] = Double.valueOf(this.dataInput.next());
            }

            // Load the integer data to the matrix
            myMatrix.loadMatrix(dataList);
            // Return the matrix populated with data.
            return myMatrix;
        }

        private void readScalar() {
            this.scalar = Double.valueOf(this.dataInput.next());
        }

        private void runMatrixAddition() {
            // Create matrices
            System.out.print("Enter the size of first matrix: ");
            int n = this.dataInput.nextInt();
            int m = this.dataInput.nextInt();
            System.out.println("Enter first matrix:");
            Matrix matrixA = readCreateMatrix(n, m);

            System.out.print("Enter the size of second matrix: ");
            n = this.dataInput.nextInt();
            m = this.dataInput.nextInt();
            System.out.println("Enter second matrix:");
            Matrix matrixB = readCreateMatrix(n, m);

            // Calculate matrix addition
            boolean equalDimensions = matrixA.checkEquivalentDimensions(matrixB);
            if (equalDimensions) {
                Matrix matrixC = matrixA.matrixAddition(matrixB);
                System.out.println("The result is:");
                matrixC.printMatrix();
            } else {
                System.out.println("ERROR");
            }
            System.out.print('\n');
        }

        private void runMatrixScalar() {
            // Create matrix
            System.out.print("Enter the size of matrix: ");
            int n = this.dataInput.nextInt();
            int m = this.dataInput.nextInt();

            System.out.println("Enter matrix:");
            Matrix matrixA = readCreateMatrix(n, m);

            // Read in the scalar
            System.out.print("Enter constant: ");
            readScalar();

            // Calculate the scalar matrix operation: alpha * A
            matrixA.matrixScalar(this.scalar);

            // Print the final matrix after scaling by a scalar.
            System.out.println("The result is:");
            matrixA.printMatrix();
            System.out.print('\n');
        }

        private void runMatrixMultiplication() {
            // Create matrix A
            System.out.print("Enter the size of first matrix: ");
            int n = this.dataInput.nextInt();
            int m = this.dataInput.nextInt();
            System.out.println("Enter first matrix:");
            Matrix matrixA = readCreateMatrix(n, m);

            // Create matrix A
            System.out.print("Enter the size of second matrix: ");
            n = this.dataInput.nextInt();
            m = this.dataInput.nextInt();
            System.out.println("Enter second matrix:");
            Matrix matrixB = readCreateMatrix(n, m);

            // Check that the matrices have compatible dimensions for matrix multiplication operation.
            boolean definedDimensions = matrixA.checkMultiplicationDimensions(matrixB);
            if (definedDimensions) {
                // Calculate matrix multiplication
                Matrix matrixC = matrixA.matrixMultiplication(matrixB);
                System.out.println("The result is:");
                matrixC.printMatrix();
            } else {
                System.out.println("ERROR");
            }
            System.out.print('\n');
        }

        private void runMatrixTranspose(String type) {
            // Create matrix
            System.out.print("Enter matrix size: ");
            int n = this.dataInput.nextInt();
            int m = this.dataInput.nextInt();
            System.out.println("Enter matrix:");
            Matrix matrixA = readCreateMatrix(n, m);

            if (type.equals("main")) {
                Matrix matrixA_T = matrixA.matrixTransposeMain();
                System.out.println("The result is:");
                matrixA_T.printMatrix();
            }
            else if (type.equals("side")) {
                Matrix matrixA_T = matrixA.matrixTransposeSide();
                System.out.println("The result is:");
                matrixA_T.printMatrix();
            }
            else if (type.equals("vertical")) {
                Matrix matrixA_T = matrixA.matrixTransposeVertical();
                System.out.println("The result is:");
                matrixA_T.printMatrix();
            } else {
                Matrix matrixA_T = matrixA.matrixTransposeHorizontal();
                System.out.println("The result is:");
                matrixA_T.printMatrix();
            }
        }


    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/60/stages/327/implement#comment
status: Unchecked
record: -1
